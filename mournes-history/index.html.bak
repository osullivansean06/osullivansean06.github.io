<!DOCTYPE html>
<html>
<head>
  <title>Mourne Mountain Climbing History Map</title>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <style>
    #map { width: 100%; height: 600px; }
    #controls { margin: 10px 0; }
    #climb-table-container { margin-top: 20px; }
    #climb-table {
      width: 100%;
      border-collapse: collapse;
    }
    #climb-table th, #climb-table td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
    }
    #climb-table th {
      background-color: #f2f2f2;
    }
    .legend {
      background: white;
      padding: 10px;
      line-height: 1.5;
    }
    .legend div {
      display: flex;
      align-items: center;
    }
    .legend span {
      display: inline-block;
      width: 20px;
      height: 10px;
      margin-right: 5px;
    }
  </style>
</head>
<body>
  <h2>Mourne Mountain Climbing History Map</h2>

  <div id="controls">
    <label for="year-slider">Select Year: </label>
    <input type="range" id="year-slider" min="1900" max="2025" step="1" value="1900">
    <span id="selected-year">1900</span>

    <label for="climber-select" style="margin-left:20px;">Select Climber: </label>
    <select id="climber-select">
      <option value="">All</option>
    </select>
  </div>

  <div id="map"></div>

  <!-- Legend -->
  <div class="legend" id="legend">
    <strong>Grade Legend</strong>
    <div><span style="background: #66cc66;"></span> M - HVS</div>
    <div><span style="background: orange;"></span> E1 - E4</div>
    <div><span style="background: red;"></span> E5 - E12</div>
    <div><span style="background: black;"></span> Unknown</div>
  </div>

  <!-- Table of filtered climbs -->
  <div id="climb-table-container">
    <h3>Climbs</h3>
    <table id="climb-table">
      <thead>
        <tr>
          <th>Route</th>
          <th>Leader</th>
          <th>Second</th>
          <th>Third</th>
          <th>Year</th>
          <th>Grade</th>
          <th>Crag</th>
          <th>Sector</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <script>
    const map = L.map('map').setView([54.2, -6.1], 11);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 18,
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    const markers = [];
    const climberSet = new Set();

    const grades = [
      "M", "D", "VD", "HVD", "S", "HS", "VS", "HVS",
      "E1", "E2", "E3", "E4",
      "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12"
    ];

    const gradeColor = grade => {
      const index = grades.indexOf(grade.toUpperCase());
      if (index >= 0 && index <= 7) return "#66cc66"; // green
      if (index >= 8 && index <= 11) return "orange";
      if (index >= 12) return "red";
      return "black";
    };

    function updateClimbTable(filteredMarkers) {
      const tableBody = document.querySelector("#climb-table tbody");
      tableBody.innerHTML = "";
      filteredMarkers.forEach(marker => {
        const props = marker.feature.properties;
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${props.route}</td>
          <td>${props.climber1}</td>
          <td>${props.climber2}</td>
          <td>${props.climber3}</td>
          <td>${props.year}</td>
          <td>${props.grade}</td>
          <td>${props.crag}</td>
          <td>${props.sector}</td>
        `;
        tableBody.appendChild(row);
      });
    }

    function filterClimbs(year, climber) {
      const filtered = markers.filter(marker => {
        const props = marker.feature.properties;
        const matchYear = year ? props.year === parseInt(year) : true;
        const matchClimber = climber
          ? [props.climber1, props.climber2, props.climber3].includes(climber)
          : true;
        return matchYear && matchClimber;
      });

      markers.forEach(m => map.removeLayer(m));
      filtered.forEach(m => map.addLayer(m));
      updateClimbTable(filtered);
    }

    fetch('climbs.geojson')
      .then(response => response.json())
      .then(data => {
        data.features.forEach(feature => {
          const props = feature.properties;

          // Build climber set
          if (props.climber1) climberSet.add(props.climber1);
          if (props.climber2) climberSet.add(props.climber2);
          if (props.climber3) climberSet.add(props.climber3);

          const jitter = () => Math.random() * (0.00009 - 0.000001) + 0.000001;
          const latlng = L.latLng(
            feature.geometry.coordinates[1] + jitter(),
            feature.geometry.coordinates[0] + jitter()
          );

          const marker = L.circleMarker(latlng, {
            radius: 6,
            color: '#003300',
            fillColor: gradeColor(props.grade),
            fillOpacity: 0.8
          }).bindPopup(`
            <strong>${props.route}</strong><br>
            Leader: ${props.climber1}<br>
            Second: ${props.climber2}<br>
            Third: ${props.climber3}<br>
            Year: ${props.year}<br>
            Grade: ${props.grade}<br>
            Crag: ${props.crag}<br>
            Sector: ${props.sector}
          `);
          marker.feature = feature;
          markers.push(marker);
        });

        // Populate dropdown
        const climberSelect = document.getElementById("climber-select");
        Array.from(climberSet).sort().forEach(climber => {
          const option = document.createElement("option");
          option.value = climber;
          option.textContent = climber;
          climberSelect.appendChild(option);
        });

        // Initial render
        filterClimbs(1900, "");

        // Hook up filters
        const slider = document.getElementById("year-slider");
        const yearDisplay = document.getElementById("selected-year");

        slider.addEventListener("input", () => {
          const year = slider.value;
          yearDisplay.textContent = year;
          filterClimbs(year, climberSelect.value);
        });

        climberSelect.addEventListener("change", () => {
          filterClimbs(slider.value, climberSelect.value);
        });
      })
      .catch(err => {
        console.error("ðŸ”¥ Error loading GeoJSON:", err);
      });
  </script>
</body>
</html>
